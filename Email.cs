using System;
using System.Net.Mail;
using System.Configuration;

namespace CeecDataTransfer
{
    public class Email
    {
        public const string COURSE_SHELL = "CourseShellEmail";
        public const string USER_NAME = "UserNameEmail";

        public static void SendCourseShellNotices()
        {
            var LogActivity = Carollo.GetApplicationActions(COURSE_SHELL);
            if (!Carollo.IsLogSetUpForApp(LogActivity))
            {
                return;
            }

            try
            {
                var courseShells = Carollo.GetMissingCourseShells();
                if (courseShells.Count > 0)
                {
                    var body = "The following course shells need to be created in CEEC :" + Environment.NewLine + Environment.NewLine;
                    foreach (Models.CourseShells shell in courseShells)
                    {
                        body += "Vendor: " + shell.Vendor + Environment.NewLine + "\tCourse External Id: " + shell.CourseId + Environment.NewLine + "\tCourse Title: " + shell.CourseName + Environment.NewLine + "\tCredit Hours: " + shell.CreditHours + Environment.NewLine + Environment.NewLine;
                    }
                    MailMessage message = new MailMessage();
                    var emailAddresses = LogActivity[0].NotificatonEmailAddresses.Split(';');
                    foreach (string address in emailAddresses)
                    {
                        message.To.Add(address);
                    }

                    message.Subject = "Course Shells For CEEC: " + DateTime.Now.ToShortDateString();
                    message.From = new MailAddress("ceec@carollo.com");
                    message.Body = body;
                    var smtp = new SmtpClient(ConfigurationManager.AppSettings["EmailHost"]);

                    smtp.Send(message);
                }
            }
            catch (Exception e)
            {
                Carollo.WriteToLog("Error at Email.SendCourseShellNotices: " + e.Message + Environment.NewLine + e.InnerException + Environment.NewLine + e.StackTrace, MessageType.Text, "System", ActionType.SetUpLog.ToString(), true, DateTime.Now, "");
            }
        }

        public static void SendUserNameChanges()
        {
            var LogActivity = Carollo.GetApplicationActions(USER_NAME);
            if (!Carollo.IsLogSetUpForApp(LogActivity))
            {
                return;
            }

            var UserNameChanges = Carollo.GetUserNameChanges();
            if (UserNameChanges.Count > 0 && LogActivity[0].NotificatonEmailAddresses.Length > 3)
            {
                var body = "The following employee user names need to be changed in CEEC :" + Environment.NewLine + Environment.NewLine;
                foreach (Models.NameChanges userNameChange in UserNameChanges)
                {
                    body += "Employee: " + userNameChange.EmpName + Environment.NewLine + "\tHCM email address: " + userNameChange.HCMUserId + Environment.NewLine + "\tCurrent CEEC user name: " + userNameChange.CeecUserId + Environment.NewLine + Environment.NewLine;
                }

                MailMessage message = new MailMessage();
                var emailAddresses = LogActivity[0].NotificatonEmailAddresses.Split(';');
                foreach (string address in emailAddresses)
                {
                    message.To.Add(address);
                }

                message.Subject = "CEEC User Names Needing Updating: " + DateTime.Now.ToShortDateString();
                message.From = new MailAddress("ceec@carollo.com");
                message.Body = body;
                var smtp = new SmtpClient(ConfigurationManager.AppSettings["EmailHost"]);

                smtp.Send(message);
            }
        }
        public static void SendErrors(string strError, string strApp)
        {
            //This code sends emails to whomever is set in the Applications table
            //Added Nancy Maze, Christian Varella, and Jorge Cano with Roy Hollis
            var LogActivity = Carollo.GetApplicationActions(USER_NAME);
            if (!Carollo.IsLogSetUpForApp(LogActivity))
            {
                return;
            }
                
            var body = "The following error was generated by CEEC Data Transfer:" + Environment.NewLine + Environment.NewLine;                    
            body += strApp + Environment.NewLine + "Error:" + strError + Environment.NewLine + Environment.NewLine;
            body += "See Activity Log for more detail.";

            MailMessage message = new MailMessage();
            var emailAddresses = LogActivity[0].NotificatonEmailAddresses.Split(';');
            foreach (string address in emailAddresses)
            {
                message.To.Add(address);
            }

            message.Subject = "CEEC Data Transfer Error: " + DateTime.Now.ToShortDateString();
            message.From = new MailAddress("ceec@carollo.com");
            message.Body = body;
            var smtp = new SmtpClient(ConfigurationManager.AppSettings["EmailHost"]);

            smtp.Send(message);
                
        }
    }
}
